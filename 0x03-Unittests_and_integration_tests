#!/usr/bin/env python3
def access_nested_map(nested_map, path):
    """Access a nested map with a sequence of keys."""
    for key in path:
        nested_map = nested_map[key]
    return nested_map
import unittest
from utils import access_nested_map
class TestAccessNestedMap(unittest.TestCase):
    def test_access_nested_map(self):
        nested_map = {"a": {"b": {"c": 42}}}
        path = ("a", "b", "c")
        result = access_nested_map(nested_map, path)
        self.assertEqual(result, 42)
import unittest
from utils import access_nested_map
class TestAccessNestedMap(unittest.TestCase):
    def test_access_nested_map(self):
        # Test simple access
        self.assertEqual(access_nested_map({"a": 1}, ("a",)), 1)

        # Test nested access
        self.assertEqual(access_nested_map({"a": {"b": 2}}, ("a",)), {"b": 2})
        self.assertEqual(access_nested_map({"a": {"b": 2}}, ("a", "b")), 2)

        # Test deeper nesting
        self.assertEqual(access_nested_map({"x": {"y": {"z": 99}}}, ("x", "y", "z")), 99)

if __name__ == '__main__':
    unittest.main()
import unittest
from parameterized import parameterized
from utils import access_nested_map

class TestAccessNestedMap(unittest.TestCase):
    @parameterized.expand([
        ({"a": 1}, ("a",), 1),
        ({"a": {"b": 2}}, ("a",), {"b": 2}),
        ({"a": {"b": 2}}, ("a", "b"), 2),
    ])
    def test_access_nested_map(self, nested_map, path, expected):
        self.assertEqual(access_nested_map(nested_map, path), expected)

if __name__ == '__main__':
    unittest.main()
import unittest
from parameterized import parameterized
from utils import access_nested_map

class TestAccessNestedMap(unittest.TestCase):
    @parameterized.expand([
        ({}, ("a",), "a"),
        ({"a": 1}, ("a", "b"), "b"),
    ])
    def test_access_nested_map_exception(self, nested_map, path, expected_key):
        with self.assertRaises(KeyError) as context:
            access_nested_map(nested_map, path)
        self.assertEqual(str(context.exception), f"'{expected_key}'")

if __name__ == '__main__':
    unittest.main()
utils.get_json is a function that takes a URL and returns a JSON response (parsed into a Python dictionary).

It uses requests.get(url).json() under the hood.

We’ll use unittest.mock to patch requests.get so the test doesn’t make real HTTP calls.
import unittest
from unittest.mock import patch, Mock
from parameterized import parameterized
from utils import get_json

class TestGetJson(unittest.TestCase):
    @parameterized.expand([
        ("http://example.com", {"payload": True}),
        ("http://holberton.io", {"payload": False}),
    ])
    @patch("utils.requests.get")
    def test_get_json(self, test_url, test_payload, mock_get):
        # Set up mock to return a response with .json() method
        mock_response = Mock()
        mock_response.json.return_value = test_payload
        mock_get.return_value = mock_response

        result = get_json(test_url)
        self.assertEqual(result, test_payload)
        mock_get.assert_called_once_with(test_url)

if __name__ == "__main__":
    unittest.main()
class TestMemoize(unittest.TestCase):
    def test_memoize(self):
        class TestClass:
            def a_method(self):
                return 42

            @memoize
            def a_property(self):
                return self.a_method()

        with patch.object(TestClass, 'a_method', return_value=42) as mock_method:
            test_obj = TestClass()

            # Call the memoized property twice
            result1 = test_obj.a_property
            result2 = test_obj.a_property

            # Assert that the result is correct
            self.assertEqual(result1, 42)
            self.assertEqual(result2, 42)

            # Assert that a_method was only called once due to memoization
            mock_method.assert_called_once()

if __name__ == "__main__":
    unittest.main()
import unittest
from unittest.mock import patch
from parameterized import parameterized
from client import GithubOrgClient


class TestGithubOrgClient(unittest.TestCase):
    @parameterized.expand([
        ("google",),
        ("abc",),
    ])
    @patch("client.get_json")
    def test_org(self, org_name, mock_get_json):
        expected_payload = {"login": org_name, "id": 12345}
        mock_get_json.return_value = expected_payload

        client = GithubOrgClient(org_name)
        result = client.org

        self.assertEqual(result, expected_payload)
        mock_get_json.assert_called_once_with(f"https://api.github.com/orgs/{org_name}")

if __name__ == "__main__":
    unittest.main()
To implement the test_public_repos_url method for unit-testing GithubOrgClient._public_repos_url, we need to:

Understand that _public_repos_url is a property (due to @memoize decorator).

Use unittest.mock.patch to mock the org property (also a memoized method).

Simulate a known return value for the org property.

Assert that _public_repos_url returns the expected value based on the mock.

Here’s how you can implement this test using unittest:
import unittest
from unittest.mock import patch, PropertyMock
from client import GithubOrgClient

class TestGithubOrgClient(unittest.TestCase):
    """Test case for GithubOrgClient"""

    @patch('client.GithubOrgClient.org', new_callable=PropertyMock)
    def test_public_repos_url(self, mock_org):
        """Test that _public_repos_url returns the expected URL from org payload"""
        # Arrange: set up the mock return value for org
        expected_url = "https://api.github.com/orgs/test_org/repos"
        mock_org.return_value = {"repos_url": expected_url}

        # Act: instantiate client and access _public_repos_url
        client = GithubOrgClient("test_org")
        result = client._public_repos_url

        # Assert: check that the property returns the expected URL
        self.assertEqual(result, expected_url)
Goal:
Mock get_json() to return a fake list of repos.

Mock _public_repos_url to return a fake URL.

Assert that public_repos() returns the expected list of repo names.

Verify both mocks are called exactly once.
import unittest
from unittest.mock import patch, PropertyMock
from client import GithubOrgClient

class TestGithubOrgClient(unittest.TestCase):
    """Test case for GithubOrgClient"""

    @patch('client.get_json')
    def test_public_repos(self, mock_get_json):
        """Test public_repos returns expected list of repo names"""
        # Arrange: define the payload and expected repo names
        payload = [
            {'name': 'repo1'},
            {'name': 'repo2'},
            {'name': 'repo3'},
        ]
        mock_get_json.return_value = payload
        expected_repos = ['repo1', 'repo2', 'repo3']

        # Patch _public_repos_url to return a dummy URL
        with patch('client.GithubOrgClient._public_repos_url', new_callable=PropertyMock) as mock_repos_url:
            mock_repos_url.return_value = "http://mocked_url.com/repos"

            # Act
            client = GithubOrgClient("test_org")
            repos = client.public_repos()

            # Assert
            self.assertEqual(repos, expected_repos)
            mock_repos_url.assert_called_once()
            mock_get_json.assert_called_once_with("http://mocked_url.com/repos")
