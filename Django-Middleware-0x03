django-admin startproject messaging_app
cd messaging_app
python -m venv venv
source venv/bin/activate 
pip install django djangorestframework
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    
    # Local apps
    'chats',
]
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}
from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    # Add extra fields as needed. For example:
    bio = models.TextField(blank=True, null=True)
    profile_picture = models.ImageField(upload_to='profiles/', blank=True, null=True)

    def __str__(self):
        return self.username
In messaging_app/settings.py, set the custom user model:
AUTH_USER_MODEL = 'chats.CustomUser'
A conversation can involve multiple users (Many-to-Many):
class Conversation(models.Model):
    participants = models.ManyToManyField('CustomUser', related_name='conversations')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Conversation {self.id}"
     Each message belongs to a conversation and has one sender (a user):
class Message(models.Model):
    sender = models.ForeignKey('CustomUser', on_delete=models.CASCADE, related_name='messages')
    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='messages')
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

    def __str__(self):
        return f"Message from {self.sender.username} at {self.timestamp}"
      python manage.py makemigrations
python manage.py migrate
from django.contrib import admin
from .models import CustomUser, Conversation, Message
from django.contrib.auth.admin import UserAdmin

admin.site.register(CustomUser, UserAdmin)
admin.site.register(Conversation)
admin.site.register(Message)
from rest_framework import serializers
from .models import CustomUser, Conversation, Message
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'username', 'email', 'bio', 'profile_picture']
      class MessageSerializer(serializers.ModelSerializer):
    sender = UserSerializer(read_only=True)

    class Meta:
        model = Message
        fields = ['id', 'sender', 'conversation', 'content', 'timestamp', 'is_read']
        read_only_fields = ['sender', 'timestamp']
      class ConversationSerializer(serializers.ModelSerializer):
    participants = UserSerializer(many=True, read_only=True)
    messages = MessageSerializer(many=True, read_only=True)

    class Meta:
        model = Conversation
        fields = ['id', 'participants', 'created_at', 'messages']
     class ConversationCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Conversation
        fields = ['id', 'participants'] 
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ConversationViewSet, MessageViewSet
router = DefaultRouter()
router.register(r'conversations', ConversationViewSet, basename='conversation')
router.register(r'messages', MessageViewSet, basename='message')
urlpatterns = [
    path('', include(router.urls)),
  from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
  path('api/', include('chats.urls')),
]
from datetime import datetime
import logging

# Configure the logger
logger = logging.getLogger(__name__)
handler = logging.FileHandler('request_logs.log')
formatter = logging.Formatter('%(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

class RequestLoggingMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        user = request.user if request.user.is_authenticated else 'Anonymous'
        path = request.path
        timestamp = datetime.now()
        log_message = f"{timestamp} - User: {user} - Path: {path}"
        logger.info(log_message)

        response = self.get_response(request)
        return response
from datetime import datetime, time
from django.http import HttpResponseForbidden

class RestrictAccessByTimeMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Restrict only specific path, e.g., /chat/ or /messaging/
        restricted_paths = ['/chat/', '/messaging/']

        # Check if request is for the chat path
        if request.path in restricted_paths:
            current_time = datetime.now().time()
            start_time = time(18, 0)  # 6:00 PM
            end_time = time(21, 0)    # 9:00 PM

            if not (start_time <= current_time <= end_time):
                return HttpResponseForbidden("Access to chat is only allowed between 6 PM and 9 PM.")

        return self.get_response(request)
import time
from django.http import HttpResponseForbidden
from collections import defaultdict

class OffensiveLanguageMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        self.message_log = defaultdict(list)  # {ip: [timestamp1, timestamp2, ...]}
        self.message_limit = 5  # max messages per window
        self.time_window = 60  # seconds

    def __call__(self, request):
        ip_address = self.get_client_ip(request)

        # Apply only to POST requests to chat endpoints
        if request.method == 'POST' and request.path.startswith('/chat/'):
            current_time = time.time()
            timestamps = self.message_log[ip_address]

            # Filter out timestamps older than 1 minute
            self.message_log[ip_address] = [
                ts for ts in timestamps if current_time - ts <= self.time_window
            ]

            if len(self.message_log[ip_address]) >= self.message_limit:
                return HttpResponseForbidden(
                    "You have exceeded the maximum number of messages allowed per minute."
                )

            # Log current timestamp
            self.message_log[ip_address].append(current_time)

        return self.get_response(request)

    def get_client_ip(self, request):
        """Extract client IP address from headers"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            return x_forwarded_for.split(',')[0]
        return request.META.get('REMOTE_ADDR')
